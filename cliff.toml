# git-cliff ~ Professional Configuration
# https://git-cliff.org/docs/configuration
#
# This configuration generates professional changelogs following conventional commits
# and modern changelog best practices.

[changelog]
# Changelog header with project info and format explanation
header = """
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

---
"""

# Main changelog body template
body = """
{% if version -%}
    {%- if version | trim_start_matches(pat="v") | split(pat=".") | first == "0" -%}
        ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }} (Pre-release)
    {%- else -%}
        ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
    {%- endif -%}
{% else -%}
    ## [Unreleased]
{% endif -%}
{% if previous -%}
    {%- set_global previous_version = previous.version | trim_start_matches(pat="v") -%}
{% endif -%}
{% for group, commits in commits | group_by(attribute="group") -%}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits -%}
        - {% if commit.scope -%}**{{ commit.scope }}**: {% endif -%}
          {%- if commit.breaking -%}
            **BREAKING**: {{ commit.message | upper_first | trim_end_matches(pat=".") }}.
          {%- else -%}
            {{ commit.message | upper_first | trim_end_matches(pat=".") }}.
          {%- endif %}
          {%- if commit.links %} ({% for link in commit.links -%}
            [{{ link.text }}]({{ link.href }})
            {%- if not loop.last %}, {% endif -%}
          {%- endfor %}){% endif %}
    {% endfor %}
{% endfor -%}
{% if version -%}
    {%- if previous -%}
        {% set_global previous_tag = "v" ~ previous_version -%}
        {% set_global current_tag = version -%}

        **Full Changelog**: https://github.com/LVivona/mrkle/compare/{{ previous_tag }}...{{ current_tag }}
    {%- endif -%}
{% endif -%}

"""

# Professional footer with generation info
footer = """

---

*This changelog was automatically generated by [git-cliff](https://github.com/orhun/git-cliff).*
"""

# Clean up whitespace and formatting
trim = true
postprocessors = [
    # Clean up multiple consecutive empty lines
    { pattern = '\n{3,}', replace = "\n\n" },
    # Remove trailing whitespace
    { pattern = '[ \t]+$', replace = "" },
    # Ensure proper spacing around headers
    { pattern = '(#{1,6}[^\n]*)\n([^#\n])', replace = "${1}\n\n${2}" },
]

[git]
# Use conventional commits for professional commit parsing
conventional_commits = true
filter_unconventional = true
split_commits = false

# Commit preprocessing for better formatting
commit_preprocessors = [
    # Convert GitHub issue references to links
    { pattern = '\(#([0-9]+)\)', replace = "([#${1}](https://github.com/LVivona/mrkle/issues/${1}))" },
    # Convert PR references to links
    { pattern = '\(PR #([0-9]+)\)', replace = "([PR #${1}](https://github.com/LVivona/mrkle/pull/${1}))" },
    # Clean up commit messages
    { pattern = '^([a-z])', replace = "${1}" },
    # Remove redundant conventional commit type from message
    { pattern = '^(feat|fix|docs|style|refactor|test|chore|ci|perf|build):\s*', replace = "" },
]

# Professional commit parsing with proper categorization
commit_parsers = [
    # Breaking changes - highest priority
    { message = ".*", body = ".*[bB]reaking[- ][cC]hange.*", group = "⚠️ BREAKING CHANGES" },

    # Features
    { message = "^feat", group = "✨ Features" },
    { message = "^add", group = "✨ Features" },

    # Bug fixes
    { message = "^fix", group = "🐛 Bug Fixes" },
    { message = "^patch", group = "🐛 Bug Fixes" },
    { message = "^hotfix", group = "🐛 Bug Fixes" },

    # Performance improvements
    { message = "^perf", group = "⚡ Performance" },
    { message = "^optimize", group = "⚡ Performance" },

    # Documentation
    { message = "^docs?", group = "📝 Documentation" },
    { message = "^doc", group = "📝 Documentation" },
    { message = "^readme", group = "📝 Documentation" },

    # Refactoring
    { message = "^refactor", group = "♻️ Code Refactoring" },
    { message = "^restructure", group = "♻️ Code Refactoring" },
    { message = "^rewrite", group = "♻️ Code Refactoring" },

    # Tests
    { message = "^test", group = "✅ Tests" },
    { message = "^spec", group = "✅ Tests" },

    # Build system and dependencies
    { message = "^build", group = "📦 Build System" },
    { message = "^deps?", group = "📦 Dependencies" },
    { message = "^cargo", group = "📦 Dependencies" },
    { message = "^bump", group = "📦 Dependencies" },
    { message = "^update.*dep", group = "📦 Dependencies" },

    # CI/CD
    { message = "^ci", group = "👷 Continuous Integration" },
    { message = "^workflow", group = "👷 Continuous Integration" },
    { message = "^pipeline", group = "👷 Continuous Integration" },
    { message = "^github", group = "👷 Continuous Integration" },

    # Styling and formatting
    { message = "^style", group = "💄 Styling" },
    { message = "^format", group = "💄 Styling" },
    { message = "^lint", group = "💄 Styling" },

    # Security
    { message = "^sec", group = "🔒 Security" },
    { body = ".*security", group = "🔒 Security" },
    { message = ".*vulnerability", group = "🔒 Security" },
    { message = ".*[sS]ecurity", group = "🔒 Security" },

    # Reverts
    { message = "^revert", group = "⏪ Reverts" },
    { message = "^undo", group = "⏪ Reverts" },

    # Skip these commit types
    { message = "^chore\\(release\\)", skip = true },
    { message = "^chore\\(version\\)", skip = true },
    { message = "^chore\\(changelog\\)", skip = true },
    { message = "^chore\\(deps-dev\\)", skip = true },
    { message = "^chore\\(pr\\)", skip = true },
    { message = "^chore\\(pull\\)", skip = true },
    { message = "^merge", skip = true },
    { message = "^wip", skip = true },
    { message = "^temp", skip = true },
    { message = "^fixup", skip = true },

    # Other chores and miscellaneous
    { message = "^chore", group = "🔧 Miscellaneous Chores" },
    { message = "^misc", group = "🔧 Miscellaneous Chores" },
    { message = "^cleanup", group = "🔧 Miscellaneous Chores" },
    { message = "^config", group = "🔧 Miscellaneous Chores" },

    # Catch-all for other commits
    { message = ".*", group = "📋 Other Changes" },
]

# Additional git configuration
protect_breaking_commits = false
filter_commits = false
tag_pattern = "v[0-9].*"
skip_tags = "v0.1.0-beta.1"
ignore_tags = "rc.*"
topo_order = false
sort_commits = "newest"
link_parsers = [
    { pattern = "#(\\d+)", href = "https://github.com/LVivona/mrkle/issues/${1}" },
]

# Release configuration
[release]
tag_message = "Release version {{ version }}"
pre_release_identifiers = ["alpha", "beta", "rc"]
