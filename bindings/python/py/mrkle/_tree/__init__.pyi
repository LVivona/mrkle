"""Type stubs for Merkle tree implementations."""

from typing import Final, Iterator, Protocol, Union
from typing_extensions import TypeAlias
from mrkle.typing import D as _D

class _MrkleTreeBase(Protocol):
    """Base protocol for Merkle tree implementations."""

    def root(self) -> str:
        """Return the root hash as a hex string."""
        ...

    def is_empty(self) -> bool:
        """Check if the tree is empty."""
        ...

    def capacity(self) -> int:
        """Return the capacity of the tree."""
        ...

    def __len__(self) -> int:
        """Return the number of nodes in the tree."""
        ...

    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def to_string(self) -> str:
        """Return a string representation of the tree structure."""
        ...

    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...

# Blake2s
class MrkleTreeBlake2s(_MrkleTreeBase):
    """Merkle tree using Blake2s hash algorithm."""

    def leaves(self) -> list[MrkleNodeBlake2s]: ...
    @staticmethod
    def dtype() -> _D: ...
    @classmethod
    def from_leaves(cls, leaves: list[bytes]) -> MrkleTreeBlake2s: ...
    def __iter__(self) -> IterableT: ...

class MrkleTreeIterBlake2s(Iterator[NodeT]):
    """Iterator for Blake2s Merkle tree."""
    def __iter__(self) -> MrkleTreeIterBlake2s: ...
    def __next__(self) -> NodeT: ...

# Blake2b
class MrkleTreeBlake2b(_MrkleTreeBase):
    """Merkle tree using Blake2b hash algorithm."""

    def leaves(self) -> list[MrkleNodeBlake2b]: ...
    @staticmethod
    def dtype() -> _D: ...
    @classmethod
    def from_leaves(cls, leaves: list[bytes]) -> MrkleTreeBlake2b: ...
    def __iter__(self) -> IterableT: ...

class MrkleTreeIterBlake2b(Iterator[NodeT]):
    """Iterator for Blake2b Merkle tree."""
    def __iter__(self) -> MrkleTreeIterBlake2b: ...
    def __next__(self) -> NodeT: ...

# Keccak224
class MrkleTreeKeccak224(_MrkleTreeBase):
    """Merkle tree using Keccak224 hash algorithm."""

    def leaves(self) -> list[MrkleNodeKeccak224]: ...
    @staticmethod
    def dtype() -> _D: ...
    @classmethod
    def from_leaves(cls, leaves: list[bytes]) -> MrkleTreeKeccak224: ...
    def __iter__(self) -> IterableT: ...

class MrkleTreeIterKeccak224(Iterator[NodeT]):
    """Iterator for Keccak224 Merkle tree."""
    def __iter__(self) -> MrkleTreeIterKeccak224: ...
    def __next__(self) -> NodeT: ...

# Keccak256
class MrkleTreeKeccak256(_MrkleTreeBase):
    """Merkle tree using Keccak256 hash algorithm."""

    def leaves(self) -> list[MrkleNodeKeccak256]: ...
    @staticmethod
    def dtype() -> _D: ...
    @classmethod
    def from_leaves(cls, leaves: list[bytes]) -> MrkleTreeKeccak256: ...
    def __iter__(self) -> IterableT: ...

class MrkleTreeIterKeccak256(Iterator[NodeT]):
    """Iterator for Keccak256 Merkle tree."""
    def __iter__(self) -> MrkleTreeIterKeccak256: ...
    def __next__(self) -> NodeT: ...

# Keccak384
class MrkleTreeKeccak384(_MrkleTreeBase):
    """Merkle tree using Keccak384 hash algorithm."""

    def leaves(self) -> list[MrkleNodeKeccak384]: ...
    @staticmethod
    def dtype() -> _D: ...
    @classmethod
    def from_leaves(cls, leaves: list[bytes]) -> MrkleTreeKeccak384: ...
    def __iter__(self) -> IterableT: ...

class MrkleTreeIterKeccak384(Iterator[NodeT]):
    """Iterator for Keccak384 Merkle tree."""
    def __iter__(self) -> MrkleTreeIterKeccak384: ...
    def __next__(self) -> NodeT: ...

# Keccak512
class MrkleTreeKeccak512(_MrkleTreeBase):
    """Merkle tree using Keccak512 hash algorithm."""

    def leaves(self) -> list[MrkleNodeKeccak512]: ...
    @staticmethod
    def dtype() -> _D: ...
    @classmethod
    def from_leaves(cls, leaves: list[bytes]) -> MrkleTreeKeccak512: ...
    def __iter__(self) -> IterableT: ...

class MrkleTreeIterKeccak512(Iterator[NodeT]):
    """Iterator for Keccak512 Merkle tree."""
    def __iter__(self) -> MrkleTreeIterKeccak512: ...
    def __next__(self) -> NodeT: ...

# SHA1
class MrkleTreeSha1(_MrkleTreeBase):
    """Merkle tree using SHA1 hash algorithm."""

    def leaves(self) -> list[MrkleNodeSha1]: ...
    @staticmethod
    def dtype() -> _D: ...
    @classmethod
    def from_leaves(cls, leaves: list[bytes]) -> MrkleTreeSha1: ...
    def __iter__(self) -> IterableT: ...

class MrkleTreeIterSha1(Iterator[NodeT]):
    """Iterator for SHA1 Merkle tree."""
    def __iter__(self) -> MrkleTreeIterSha1: ...
    def __next__(self) -> NodeT: ...

# SHA224
class MrkleTreeSha224(_MrkleTreeBase):
    """Merkle tree using SHA224 hash algorithm."""

    def leaves(self) -> list[MrkleNodeSha224]: ...
    @staticmethod
    def dtype() -> _D: ...
    @classmethod
    def from_leaves(cls, leaves: list[bytes]) -> MrkleTreeSha224: ...
    def __iter__(self) -> IterableT: ...

class MrkleTreeIterSha224(Iterator[NodeT]):
    """Iterator for SHA224 Merkle tree."""
    def __iter__(self) -> MrkleTreeIterSha224: ...
    def __next__(self) -> NodeT: ...

# SHA256
class MrkleTreeSha256(_MrkleTreeBase):
    """Merkle tree using SHA256 hash algorithm."""

    def leaves(self) -> list[MrkleNodeSha256]: ...
    @staticmethod
    def dtype() -> _D: ...
    @classmethod
    def from_leaves(cls, leaves: list[bytes]) -> MrkleTreeSha256: ...
    def __iter__(self) -> IterableT: ...

class MrkleTreeIterSha256(Iterator[NodeT]):
    """Iterator for SHA256 Merkle tree."""
    def __iter__(self) -> MrkleTreeIterSha256: ...
    def __next__(self) -> NodeT: ...

# SHA384
class MrkleTreeSha384(_MrkleTreeBase):
    """Merkle tree using SHA384 hash algorithm."""

    def leaves(self) -> list[MrkleNodeSha384]: ...
    @staticmethod
    def dtype() -> _D: ...
    @classmethod
    def from_leaves(cls, leaves: list[bytes]) -> MrkleTreeSha384: ...
    def __iter__(self) -> IterableT: ...

class MrkleTreeIterSha384(Iterator[NodeT]):
    """Iterator for SHA384 Merkle tree."""
    def __iter__(self) -> MrkleTreeIterSha384: ...
    def __next__(self) -> NodeT: ...

# SHA512
class MrkleTreeSha512(_MrkleTreeBase):
    """Merkle tree using SHA512 hash algorithm."""

    def leaves(self) -> list[MrkleNodeSha512]: ...
    @staticmethod
    def dtype() -> _D: ...
    @classmethod
    def from_leaves(cls, leaves: list[bytes]) -> MrkleTreeSha512: ...
    def __iter__(self) -> IterableT: ...

class MrkleTreeIterSha512(Iterator[NodeT]):
    """Iterator for SHA512 Merkle tree."""
    def __iter__(self) -> MrkleTreeIterSha512: ...
    def __next__(self) -> NodeT: ...

class MrkleNodeBlake2s:
    """Merkle tree node using Blake2s hash algorithm."""

    def digest(self) -> bytes:
        """Return the hash digest as bytes."""
        ...

    def hexdigest(self) -> str:
        """Return the hash digest as a hex string."""
        ...

    @staticmethod
    def leaf(payload: bytes) -> MrkleNodeBlake2s:
        """Create a leaf node from payload bytes."""
        ...

    @staticmethod
    def leaf_with_digest(payload: bytes, hash: bytes) -> NodeT:
        """Create a leaf node with a pre-computed hash."""
        ...

    @staticmethod
    def dtype() -> _D: ...
    def is_leaf(self) -> bool:
        """Check if this node is a leaf node."""
        ...

    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...

class MrkleNodeBlake2b:
    """Merkle tree node using Blake2b hash algorithm."""

    def digest(self) -> bytes: ...
    def hexdigest(self) -> str: ...
    @staticmethod
    def leaf(payload: bytes) -> MrkleNodeBlake2b: ...
    @staticmethod
    def leaf_with_digest(payload: bytes, hash: bytes) -> NodeT: ...
    @staticmethod
    def dtype() -> _D: ...
    def is_leaf(self) -> bool: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...

class MrkleNodeKeccak224:
    """Merkle tree node using Keccak224 hash algorithm."""

    def digest(self) -> bytes: ...
    def hexdigest(self) -> str: ...
    @staticmethod
    def leaf(payload: bytes) -> MrkleNodeKeccak224: ...
    @staticmethod
    def leaf_with_digest(payload: bytes, hash: bytes) -> NodeT: ...
    @staticmethod
    def dtype() -> _D: ...
    def is_leaf(self) -> bool: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...

class MrkleNodeKeccak256:
    """Merkle tree node using Keccak256 hash algorithm."""

    def digest(self) -> bytes: ...
    def hexdigest(self) -> str: ...
    @staticmethod
    def leaf(payload: bytes) -> MrkleNodeKeccak256: ...
    @staticmethod
    def leaf_with_digest(payload: bytes, hash: bytes) -> NodeT: ...
    @staticmethod
    def dtype() -> _D: ...
    def is_leaf(self) -> bool: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...

class MrkleNodeKeccak384:
    """Merkle tree node using Keccak384 hash algorithm."""

    def digest(self) -> bytes: ...
    def hexdigest(self) -> str: ...
    @staticmethod
    def leaf(payload: bytes) -> MrkleNodeKeccak384: ...
    @staticmethod
    def leaf_with_digest(payload: bytes, hash: bytes) -> NodeT: ...
    @staticmethod
    def dtype() -> _D: ...
    def is_leaf(self) -> bool: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...

class MrkleNodeKeccak512:
    """Merkle tree node using Keccak512 hash algorithm."""

    def digest(self) -> bytes: ...
    def hexdigest(self) -> str: ...
    @staticmethod
    def leaf(payload: bytes) -> MrkleNodeKeccak512: ...
    @staticmethod
    def leaf_with_digest(payload: bytes, hash: bytes) -> NodeT: ...
    @staticmethod
    def dtype() -> _D: ...
    def is_leaf(self) -> bool: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...

class MrkleNodeSha1:
    """Merkle tree node using SHA1 hash algorithm."""

    def digest(self) -> bytes: ...
    def hexdigest(self) -> str: ...
    @staticmethod
    def leaf(payload: bytes) -> MrkleNodeSha1: ...
    @staticmethod
    def leaf_with_digest(payload: bytes, hash: bytes) -> NodeT: ...
    @staticmethod
    def dtype() -> _D: ...
    def is_leaf(self) -> bool: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...

class MrkleNodeSha224:
    """Merkle tree node using SHA224 hash algorithm."""

    def digest(self) -> bytes: ...
    def hexdigest(self) -> str: ...
    @staticmethod
    def leaf(payload: bytes) -> MrkleNodeSha224: ...
    @staticmethod
    def leaf_with_digest(payload: bytes, hash: bytes) -> NodeT: ...
    @staticmethod
    def dtype() -> _D: ...
    def is_leaf(self) -> bool: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...

class MrkleNodeSha256:
    """Merkle tree node using SHA256 hash algorithm."""

    def digest(self) -> bytes: ...
    def hexdigest(self) -> str: ...
    @staticmethod
    def leaf(payload: bytes) -> MrkleNodeSha256: ...
    @staticmethod
    def leaf_with_digest(payload: bytes, hash: bytes) -> NodeT: ...
    @staticmethod
    def dtype() -> _D: ...
    def is_leaf(self) -> bool: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...

class MrkleNodeSha384:
    """Merkle tree node using SHA384 hash algorithm."""

    def digest(self) -> bytes: ...
    def hexdigest(self) -> str: ...
    @staticmethod
    def leaf(payload: bytes) -> MrkleNodeSha384: ...
    @staticmethod
    def leaf_with_digest(payload: bytes, hash: bytes) -> NodeT: ...
    @staticmethod
    def dtype() -> _D: ...
    def is_leaf(self) -> bool: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...

class MrkleNodeSha512:
    """Merkle tree node using SHA512 hash algorithm."""

    def digest(self) -> bytes: ...
    def hexdigest(self) -> str: ...
    @staticmethod
    def leaf(payload: bytes) -> MrkleNodeSha512: ...
    @staticmethod
    def leaf_with_digest(payload: bytes, hash: bytes) -> NodeT: ...
    @staticmethod
    def dtype() -> _D: ...
    def is_leaf(self) -> bool: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...

NodeT: TypeAlias = Union[
    MrkleNodeBlake2s,
    MrkleNodeBlake2b,
    MrkleNodeKeccak224,
    MrkleNodeKeccak256,
    MrkleNodeKeccak384,
    MrkleNodeKeccak512,
    MrkleNodeSha1,
    MrkleNodeSha224,
    MrkleNodeSha256,
    MrkleNodeSha384,
    MrkleNodeSha512,
]

TreeT: TypeAlias = Union[
    MrkleTreeBlake2s,
    MrkleTreeBlake2b,
    MrkleTreeKeccak224,
    MrkleTreeKeccak256,
    MrkleTreeKeccak384,
    MrkleTreeKeccak512,
    MrkleTreeSha1,
    MrkleTreeSha224,
    MrkleTreeSha256,
    MrkleTreeSha384,
    MrkleTreeSha512,
]

IterableT: TypeAlias = Union[
    MrkleTreeIterBlake2s,
    MrkleTreeIterBlake2b,
    MrkleTreeIterKeccak224,
    MrkleTreeIterKeccak256,
    MrkleTreeIterKeccak384,
    MrkleTreeIterKeccak512,
    MrkleTreeIterSha1,
    MrkleTreeIterSha224,
    MrkleTreeIterSha256,
    MrkleTreeIterSha384,
    MrkleTreeIterSha512,
]

_TREE_MAP: Final[dict[str, TreeT]]
_NODE_MAP: Final[dict[str, NodeT]]
